// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `addressbook.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct BookItem {
    // message fields
    pub id: ::std::string::String,
    pub address: ::protobuf::SingularPtrField<Address>,
    pub label: ::std::string::String,
    pub blockchain: u32,
    pub create_timestamp: u64,
    pub update_timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BookItem {
    fn default() -> &'a BookItem {
        <BookItem as ::protobuf::Message>::default_instance()
    }
}

impl BookItem {
    pub fn new() -> BookItem {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .emerald.state.Address address = 2;


    pub fn get_address(&self) -> &Address {
        self.address.as_ref().unwrap_or_else(|| <Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: Address) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut Address {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> Address {
        self.address.take().unwrap_or_else(|| Address::new())
    }

    // string label = 3;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // uint32 blockchain = 5;


    pub fn get_blockchain(&self) -> u32 {
        self.blockchain
    }
    pub fn clear_blockchain(&mut self) {
        self.blockchain = 0;
    }

    // Param is passed by value, moved
    pub fn set_blockchain(&mut self, v: u32) {
        self.blockchain = v;
    }

    // uint64 create_timestamp = 6;


    pub fn get_create_timestamp(&self) -> u64 {
        self.create_timestamp
    }
    pub fn clear_create_timestamp(&mut self) {
        self.create_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_create_timestamp(&mut self, v: u64) {
        self.create_timestamp = v;
    }

    // uint64 update_timestamp = 7;


    pub fn get_update_timestamp(&self) -> u64 {
        self.update_timestamp
    }
    pub fn clear_update_timestamp(&mut self) {
        self.update_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_update_timestamp(&mut self, v: u64) {
        self.update_timestamp = v;
    }
}

impl ::protobuf::Message for BookItem {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.blockchain = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.create_timestamp = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.update_timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.label);
        }
        if self.blockchain != 0 {
            my_size += ::protobuf::rt::value_size(5, self.blockchain, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.create_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(6, self.create_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.update_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(7, self.update_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.label.is_empty() {
            os.write_string(3, &self.label)?;
        }
        if self.blockchain != 0 {
            os.write_uint32(5, self.blockchain)?;
        }
        if self.create_timestamp != 0 {
            os.write_uint64(6, self.create_timestamp)?;
        }
        if self.update_timestamp != 0 {
            os.write_uint64(7, self.update_timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BookItem {
        BookItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &BookItem| { &m.id },
                |m: &mut BookItem| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Address>>(
                "address",
                |m: &BookItem| { &m.address },
                |m: &mut BookItem| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &BookItem| { &m.label },
                |m: &mut BookItem| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "blockchain",
                |m: &BookItem| { &m.blockchain },
                |m: &mut BookItem| { &mut m.blockchain },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "create_timestamp",
                |m: &BookItem| { &m.create_timestamp },
                |m: &mut BookItem| { &mut m.create_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "update_timestamp",
                |m: &BookItem| { &m.update_timestamp },
                |m: &mut BookItem| { &mut m.update_timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BookItem>(
                "BookItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BookItem {
        static instance: ::protobuf::rt::LazyV2<BookItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BookItem::new)
    }
}

impl ::protobuf::Clear for BookItem {
    fn clear(&mut self) {
        self.id.clear();
        self.address.clear();
        self.label.clear();
        self.blockchain = 0;
        self.create_timestamp = 0;
        self.update_timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BookItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BookItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Address {
    // message fields
    pub field_type: Address_AddressType,
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Address {
    fn default() -> &'a Address {
        <Address as ::protobuf::Message>::default_instance()
    }
}

impl Address {
    pub fn new() -> Address {
        ::std::default::Default::default()
    }

    // .emerald.state.Address.AddressType type = 1;


    pub fn get_field_type(&self) -> Address_AddressType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Address_AddressType::PLAIN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Address_AddressType) {
        self.field_type = v;
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Address {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != Address_AddressType::PLAIN {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != Address_AddressType::PLAIN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Address {
        Address::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Address_AddressType>>(
                "type",
                |m: &Address| { &m.field_type },
                |m: &mut Address| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &Address| { &m.address },
                |m: &mut Address| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Address>(
                "Address",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Address {
        static instance: ::protobuf::rt::LazyV2<Address> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Address::new)
    }
}

impl ::protobuf::Clear for Address {
    fn clear(&mut self) {
        self.field_type = Address_AddressType::PLAIN;
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Address {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Address {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Address_AddressType {
    PLAIN = 0,
    XPUB = 1,
}

impl ::protobuf::ProtobufEnum for Address_AddressType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Address_AddressType> {
        match value {
            0 => ::std::option::Option::Some(Address_AddressType::PLAIN),
            1 => ::std::option::Option::Some(Address_AddressType::XPUB),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Address_AddressType] = &[
            Address_AddressType::PLAIN,
            Address_AddressType::XPUB,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Address_AddressType>("Address.AddressType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Address_AddressType {
}

impl ::std::default::Default for Address_AddressType {
    fn default() -> Self {
        Address_AddressType::PLAIN
    }
}

impl ::protobuf::reflect::ProtobufValue for Address_AddressType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11addressbook.proto\x12\remerald.state\"\xd8\x01\n\x08BookItem\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x120\n\x07address\x18\x02\x20\x01\
    (\x0b2\x16.emerald.state.AddressR\x07address\x12\x14\n\x05label\x18\x03\
    \x20\x01(\tR\x05label\x12\x1e\n\nblockchain\x18\x05\x20\x01(\rR\nblockch\
    ain\x12)\n\x10create_timestamp\x18\x06\x20\x01(\x04R\x0fcreateTimestamp\
    \x12)\n\x10update_timestamp\x18\x07\x20\x01(\x04R\x0fupdateTimestamp\"\
    \x7f\n\x07Address\x126\n\x04type\x18\x01\x20\x01(\x0e2\".emerald.state.A\
    ddress.AddressTypeR\x04type\x12\x18\n\x07address\x18\x02\x20\x01(\tR\x07\
    address\"\"\n\x0bAddressType\x12\t\n\x05PLAIN\x10\0\x12\x08\n\x04XPUB\
    \x10\x01J\xfe\x04\n\x06\x12\x04\0\0\x14\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\0\x16\n\n\n\x02\x04\0\x12\x04\x03\0\n\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\x10\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x04\x02\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x04\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x04\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x04\x0e\x0f\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x05\x02\x16\n\x0c\n\
    \x05\x04\0\x02\x01\x06\x12\x03\x05\x02\t\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x05\n\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x05\x14\x15\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x02\x13\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x06\t\x0e\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x11\x12\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x07\x02\x18\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x07\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x07\t\x13\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x07\x16\x17\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x08\
    \x02\x1e\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03\x08\t\x19\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03\x08\x1c\x1d\n\x0b\n\x04\x04\0\x02\x05\x12\x03\t\x02\x1e\n\x0c\n\x05\
    \x04\0\x02\x05\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\t\t\x19\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\t\x1c\x1d\n\n\n\x02\
    \x04\x01\x12\x04\x0c\0\x14\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08\x0f\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\r\x02\x17\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\r\x02\r\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\r\x0e\x12\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x15\x16\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03\x0e\x02\x15\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0e\t\x10\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x0e\x13\x14\n\x0c\n\x04\x04\x01\x04\0\x12\x04\
    \x10\x02\x13\x03\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03\x10\x07\x12\n\r\n\
    \x06\x04\x01\x04\0\x02\0\x12\x03\x11\x04\x0e\n\x0e\n\x07\x04\x01\x04\0\
    \x02\0\x01\x12\x03\x11\x04\t\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03\
    \x11\x0c\r\n\r\n\x06\x04\x01\x04\0\x02\x01\x12\x03\x12\x04\r\n\x0e\n\x07\
    \x04\x01\x04\0\x02\x01\x01\x12\x03\x12\x04\x08\n\x0e\n\x07\x04\x01\x04\0\
    \x02\x01\x02\x12\x03\x12\x0b\x0cb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
