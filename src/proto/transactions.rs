// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `transactions.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;
#[derive(PartialEq, Clone, Default)]
pub struct Transaction {
    // message fields
    pub blockchain: BlockchainId,
    pub tx_id: ::std::string::String,
    pub own: bool,
    pub since_timestamp: u64,
    pub sync_timestamp: u64,
    pub confirm_timestamp: u64,
    pub state: State,
    pub block: ::protobuf::SingularPtrField<BlockRef>,
    pub status: Status,
    pub changes: ::protobuf::RepeatedField<Change>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    // .emerald.state.BlockchainId blockchain = 1;


    pub fn get_blockchain(&self) -> BlockchainId {
        self.blockchain
    }
    pub fn clear_blockchain(&mut self) {
        self.blockchain = BlockchainId::CHAIN_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_blockchain(&mut self, v: BlockchainId) {
        self.blockchain = v;
    }

    // string tx_id = 2;


    pub fn get_tx_id(&self) -> &str {
        &self.tx_id
    }
    pub fn clear_tx_id(&mut self) {
        self.tx_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_id(&mut self, v: ::std::string::String) {
        self.tx_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_id(&mut self) -> &mut ::std::string::String {
        &mut self.tx_id
    }

    // Take field
    pub fn take_tx_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tx_id, ::std::string::String::new())
    }

    // bool own = 3;


    pub fn get_own(&self) -> bool {
        self.own
    }
    pub fn clear_own(&mut self) {
        self.own = false;
    }

    // Param is passed by value, moved
    pub fn set_own(&mut self, v: bool) {
        self.own = v;
    }

    // uint64 since_timestamp = 4;


    pub fn get_since_timestamp(&self) -> u64 {
        self.since_timestamp
    }
    pub fn clear_since_timestamp(&mut self) {
        self.since_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_since_timestamp(&mut self, v: u64) {
        self.since_timestamp = v;
    }

    // uint64 sync_timestamp = 5;


    pub fn get_sync_timestamp(&self) -> u64 {
        self.sync_timestamp
    }
    pub fn clear_sync_timestamp(&mut self) {
        self.sync_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_sync_timestamp(&mut self, v: u64) {
        self.sync_timestamp = v;
    }

    // uint64 confirm_timestamp = 6;


    pub fn get_confirm_timestamp(&self) -> u64 {
        self.confirm_timestamp
    }
    pub fn clear_confirm_timestamp(&mut self) {
        self.confirm_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_confirm_timestamp(&mut self, v: u64) {
        self.confirm_timestamp = v;
    }

    // .emerald.state.State state = 7;


    pub fn get_state(&self) -> State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = State::PREPARED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: State) {
        self.state = v;
    }

    // .emerald.state.BlockRef block = 8;


    pub fn get_block(&self) -> &BlockRef {
        self.block.as_ref().unwrap_or_else(|| <BlockRef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: BlockRef) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut BlockRef {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> BlockRef {
        self.block.take().unwrap_or_else(|| BlockRef::new())
    }

    // .emerald.state.Status status = 9;


    pub fn get_status(&self) -> Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = Status::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = v;
    }

    // repeated .emerald.state.Change changes = 10;


    pub fn get_changes(&self) -> &[Change] {
        &self.changes
    }
    pub fn clear_changes(&mut self) {
        self.changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_changes(&mut self, v: ::protobuf::RepeatedField<Change>) {
        self.changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_changes(&mut self) -> &mut ::protobuf::RepeatedField<Change> {
        &mut self.changes
    }

    // Take field
    pub fn take_changes(&mut self) -> ::protobuf::RepeatedField<Change> {
        ::std::mem::replace(&mut self.changes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.changes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.blockchain, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tx_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.own = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.since_timestamp = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sync_timestamp = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.confirm_timestamp = tmp;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                9 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 9, &mut self.unknown_fields)?
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.changes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.blockchain != BlockchainId::CHAIN_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.blockchain);
        }
        if !self.tx_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tx_id);
        }
        if self.own != false {
            my_size += 2;
        }
        if self.since_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.since_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sync_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.sync_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.confirm_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(6, self.confirm_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.state != State::PREPARED {
            my_size += ::protobuf::rt::enum_size(7, self.state);
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.status != Status::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(9, self.status);
        }
        for value in &self.changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.blockchain != BlockchainId::CHAIN_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.blockchain))?;
        }
        if !self.tx_id.is_empty() {
            os.write_string(2, &self.tx_id)?;
        }
        if self.own != false {
            os.write_bool(3, self.own)?;
        }
        if self.since_timestamp != 0 {
            os.write_uint64(4, self.since_timestamp)?;
        }
        if self.sync_timestamp != 0 {
            os.write_uint64(5, self.sync_timestamp)?;
        }
        if self.confirm_timestamp != 0 {
            os.write_uint64(6, self.confirm_timestamp)?;
        }
        if self.state != State::PREPARED {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.status != Status::UNKNOWN {
            os.write_enum(9, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        for v in &self.changes {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BlockchainId>>(
                "blockchain",
                |m: &Transaction| { &m.blockchain },
                |m: &mut Transaction| { &mut m.blockchain },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tx_id",
                |m: &Transaction| { &m.tx_id },
                |m: &mut Transaction| { &mut m.tx_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "own",
                |m: &Transaction| { &m.own },
                |m: &mut Transaction| { &mut m.own },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "since_timestamp",
                |m: &Transaction| { &m.since_timestamp },
                |m: &mut Transaction| { &mut m.since_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sync_timestamp",
                |m: &Transaction| { &m.sync_timestamp },
                |m: &mut Transaction| { &mut m.sync_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "confirm_timestamp",
                |m: &Transaction| { &m.confirm_timestamp },
                |m: &mut Transaction| { &mut m.confirm_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                "state",
                |m: &Transaction| { &m.state },
                |m: &mut Transaction| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockRef>>(
                "block",
                |m: &Transaction| { &m.block },
                |m: &mut Transaction| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                "status",
                |m: &Transaction| { &m.status },
                |m: &mut Transaction| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Change>>(
                "changes",
                |m: &Transaction| { &m.changes },
                |m: &mut Transaction| { &mut m.changes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Transaction>(
                "Transaction",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Transaction {
        static instance: ::protobuf::rt::LazyV2<Transaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Transaction::new)
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.blockchain = BlockchainId::CHAIN_UNSPECIFIED;
        self.tx_id.clear();
        self.own = false;
        self.since_timestamp = 0;
        self.sync_timestamp = 0;
        self.confirm_timestamp = 0;
        self.state = State::PREPARED;
        self.block.clear();
        self.status = Status::UNKNOWN;
        self.changes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct BlockRef {
    // message fields
    pub height: u64,
    pub block_id: ::std::string::String,
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockRef {
    fn default() -> &'a BlockRef {
        <BlockRef as ::protobuf::Message>::default_instance()
    }
}

impl BlockRef {
    pub fn new() -> BlockRef {
        ::std::default::Default::default()
    }

    // uint64 height = 1;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // string block_id = 2;


    pub fn get_block_id(&self) -> &str {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::string::String) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::string::String {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.block_id, ::std::string::String::new())
    }

    // uint64 timestamp = 3;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for BlockRef {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.block_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.block_id);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_uint64(1, self.height)?;
        }
        if !self.block_id.is_empty() {
            os.write_string(2, &self.block_id)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockRef {
        BlockRef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &BlockRef| { &m.height },
                |m: &mut BlockRef| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "block_id",
                |m: &BlockRef| { &m.block_id },
                |m: &mut BlockRef| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &BlockRef| { &m.timestamp },
                |m: &mut BlockRef| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockRef>(
                "BlockRef",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static BlockRef {
        static instance: ::protobuf::rt::LazyV2<BlockRef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockRef::new)
    }
}

impl ::protobuf::Clear for BlockRef {
    fn clear(&mut self) {
        self.height = 0;
        self.block_id.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockRef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockRef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Change {
    // message fields
    pub own: bool,
    pub wallet_id: ::std::string::String,
    pub entry_id: u32,
    pub address: ::std::string::String,
    pub hd_path: ::std::string::String,
    pub asset: ::std::string::String,
    pub amount: ::std::string::String,
    pub change_type: ::protobuf::SingularPtrField<Change>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Change {
    fn default() -> &'a Change {
        <Change as ::protobuf::Message>::default_instance()
    }
}

impl Change {
    pub fn new() -> Change {
        ::std::default::Default::default()
    }

    // bool own = 1;


    pub fn get_own(&self) -> bool {
        self.own
    }
    pub fn clear_own(&mut self) {
        self.own = false;
    }

    // Param is passed by value, moved
    pub fn set_own(&mut self, v: bool) {
        self.own = v;
    }

    // string wallet_id = 2;


    pub fn get_wallet_id(&self) -> &str {
        &self.wallet_id
    }
    pub fn clear_wallet_id(&mut self) {
        self.wallet_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_wallet_id(&mut self, v: ::std::string::String) {
        self.wallet_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wallet_id(&mut self) -> &mut ::std::string::String {
        &mut self.wallet_id
    }

    // Take field
    pub fn take_wallet_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.wallet_id, ::std::string::String::new())
    }

    // uint32 entry_id = 3;


    pub fn get_entry_id(&self) -> u32 {
        self.entry_id
    }
    pub fn clear_entry_id(&mut self) {
        self.entry_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_entry_id(&mut self, v: u32) {
        self.entry_id = v;
    }

    // string address = 4;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // string hd_path = 5;


    pub fn get_hd_path(&self) -> &str {
        &self.hd_path
    }
    pub fn clear_hd_path(&mut self) {
        self.hd_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_hd_path(&mut self, v: ::std::string::String) {
        self.hd_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hd_path(&mut self) -> &mut ::std::string::String {
        &mut self.hd_path
    }

    // Take field
    pub fn take_hd_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hd_path, ::std::string::String::new())
    }

    // string asset = 6;


    pub fn get_asset(&self) -> &str {
        &self.asset
    }
    pub fn clear_asset(&mut self) {
        self.asset.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset(&mut self, v: ::std::string::String) {
        self.asset = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset(&mut self) -> &mut ::std::string::String {
        &mut self.asset
    }

    // Take field
    pub fn take_asset(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset, ::std::string::String::new())
    }

    // string amount = 7;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // .emerald.state.Change change_type = 8;


    pub fn get_change_type(&self) -> &Change {
        self.change_type.as_ref().unwrap_or_else(|| <Change as ::protobuf::Message>::default_instance())
    }
    pub fn clear_change_type(&mut self) {
        self.change_type.clear();
    }

    pub fn has_change_type(&self) -> bool {
        self.change_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_change_type(&mut self, v: Change) {
        self.change_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_change_type(&mut self) -> &mut Change {
        if self.change_type.is_none() {
            self.change_type.set_default();
        }
        self.change_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_change_type(&mut self) -> Change {
        self.change_type.take().unwrap_or_else(|| Change::new())
    }
}

impl ::protobuf::Message for Change {
    fn is_initialized(&self) -> bool {
        for v in &self.change_type {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.own = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.wallet_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.entry_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hd_path)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.change_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.own != false {
            my_size += 2;
        }
        if !self.wallet_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.wallet_id);
        }
        if self.entry_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.entry_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.address);
        }
        if !self.hd_path.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.hd_path);
        }
        if !self.asset.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.asset);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.amount);
        }
        if let Some(ref v) = self.change_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.own != false {
            os.write_bool(1, self.own)?;
        }
        if !self.wallet_id.is_empty() {
            os.write_string(2, &self.wallet_id)?;
        }
        if self.entry_id != 0 {
            os.write_uint32(3, self.entry_id)?;
        }
        if !self.address.is_empty() {
            os.write_string(4, &self.address)?;
        }
        if !self.hd_path.is_empty() {
            os.write_string(5, &self.hd_path)?;
        }
        if !self.asset.is_empty() {
            os.write_string(6, &self.asset)?;
        }
        if !self.amount.is_empty() {
            os.write_string(7, &self.amount)?;
        }
        if let Some(ref v) = self.change_type.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Change {
        Change::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "own",
                |m: &Change| { &m.own },
                |m: &mut Change| { &mut m.own },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "wallet_id",
                |m: &Change| { &m.wallet_id },
                |m: &mut Change| { &mut m.wallet_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "entry_id",
                |m: &Change| { &m.entry_id },
                |m: &mut Change| { &mut m.entry_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &Change| { &m.address },
                |m: &mut Change| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hd_path",
                |m: &Change| { &m.hd_path },
                |m: &mut Change| { &mut m.hd_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset",
                |m: &Change| { &m.asset },
                |m: &mut Change| { &mut m.asset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &Change| { &m.amount },
                |m: &mut Change| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Change>>(
                "change_type",
                |m: &Change| { &m.change_type },
                |m: &mut Change| { &mut m.change_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Change>(
                "Change",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Change {
        static instance: ::protobuf::rt::LazyV2<Change> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Change::new)
    }
}

impl ::protobuf::Clear for Change {
    fn clear(&mut self) {
        self.own = false;
        self.wallet_id.clear();
        self.entry_id = 0;
        self.address.clear();
        self.hd_path.clear();
        self.asset.clear();
        self.amount.clear();
        self.change_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Change {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Change {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum Change_ChangeType {
    UNSPECIFIED = 0,
    TRANSFER = 1,
    FEE = 2,
}

impl ::protobuf::ProtobufEnum for Change_ChangeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Change_ChangeType> {
        match value {
            0 => ::std::option::Option::Some(Change_ChangeType::UNSPECIFIED),
            1 => ::std::option::Option::Some(Change_ChangeType::TRANSFER),
            2 => ::std::option::Option::Some(Change_ChangeType::FEE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Change_ChangeType] = &[
            Change_ChangeType::UNSPECIFIED,
            Change_ChangeType::TRANSFER,
            Change_ChangeType::FEE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Change_ChangeType>("Change.ChangeType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Change_ChangeType {}

impl ::std::default::Default for Change_ChangeType {
    fn default() -> Self {
        Change_ChangeType::UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Change_ChangeType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum BlockchainId {
    CHAIN_UNSPECIFIED = 0,
    CHAIN_BITCOIN = 1,
    CHAIN_ETHEREUM = 100,
    CHAIN_ETHEREUM_CLASSIC = 101,
    CHAIN_MORDEN = 10001,
    CHAIN_KOVAN = 10002,
    CHAIN_TESTNET_BITCOIN = 10003,
    CHAIN_GOERLI = 10005,
    CHAIN_ROPSTEN = 10006,
    CHAIN_RINKEBY = 10007,
}

impl ::protobuf::ProtobufEnum for BlockchainId {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BlockchainId> {
        match value {
            0 => ::std::option::Option::Some(BlockchainId::CHAIN_UNSPECIFIED),
            1 => ::std::option::Option::Some(BlockchainId::CHAIN_BITCOIN),
            100 => ::std::option::Option::Some(BlockchainId::CHAIN_ETHEREUM),
            101 => ::std::option::Option::Some(BlockchainId::CHAIN_ETHEREUM_CLASSIC),
            10001 => ::std::option::Option::Some(BlockchainId::CHAIN_MORDEN),
            10002 => ::std::option::Option::Some(BlockchainId::CHAIN_KOVAN),
            10003 => ::std::option::Option::Some(BlockchainId::CHAIN_TESTNET_BITCOIN),
            10005 => ::std::option::Option::Some(BlockchainId::CHAIN_GOERLI),
            10006 => ::std::option::Option::Some(BlockchainId::CHAIN_ROPSTEN),
            10007 => ::std::option::Option::Some(BlockchainId::CHAIN_RINKEBY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BlockchainId] = &[
            BlockchainId::CHAIN_UNSPECIFIED,
            BlockchainId::CHAIN_BITCOIN,
            BlockchainId::CHAIN_ETHEREUM,
            BlockchainId::CHAIN_ETHEREUM_CLASSIC,
            BlockchainId::CHAIN_MORDEN,
            BlockchainId::CHAIN_KOVAN,
            BlockchainId::CHAIN_TESTNET_BITCOIN,
            BlockchainId::CHAIN_GOERLI,
            BlockchainId::CHAIN_ROPSTEN,
            BlockchainId::CHAIN_RINKEBY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BlockchainId>("BlockchainId", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BlockchainId {}

impl ::std::default::Default for BlockchainId {
    fn default() -> Self {
        BlockchainId::CHAIN_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockchainId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum State {
    PREPARED = 0,
    SUBMITTED = 10,
    REPLACED = 11,
    CONFIRMED = 12,
    DROPPED = 20,
}

impl ::protobuf::ProtobufEnum for State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<State> {
        match value {
            0 => ::std::option::Option::Some(State::PREPARED),
            10 => ::std::option::Option::Some(State::SUBMITTED),
            11 => ::std::option::Option::Some(State::REPLACED),
            12 => ::std::option::Option::Some(State::CONFIRMED),
            20 => ::std::option::Option::Some(State::DROPPED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [State] = &[
            State::PREPARED,
            State::SUBMITTED,
            State::REPLACED,
            State::CONFIRMED,
            State::DROPPED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<State>("State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for State {}

impl ::std::default::Default for State {
    fn default() -> Self {
        State::PREPARED
    }
}

impl ::protobuf::reflect::ProtobufValue for State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum Status {
    UNKNOWN = 0,
    OK = 1,
    FAILED = 2,
}

impl ::protobuf::ProtobufEnum for Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::UNKNOWN),
            1 => ::std::option::Option::Some(Status::OK),
            2 => ::std::option::Option::Some(Status::FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Status] = &[
            Status::UNKNOWN,
            Status::OK,
            Status::FAILED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Status>("Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Status {}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12transactions.proto\x12\remerald.state\x1a\x0ccommon.proto\"\xa9\
    \x03\n\x0bTransaction\x12;\n\nblockchain\x18\x01\x20\x01(\x0e2\x1b.emera\
    ld.state.BlockchainIdR\nblockchain\x12\x13\n\x05tx_id\x18\x02\x20\x01(\t\
    R\x04txId\x12\x10\n\x03own\x18\x03\x20\x01(\x08R\x03own\x12'\n\x0fsince_\
    timestamp\x18\x04\x20\x01(\x04R\x0esinceTimestamp\x12%\n\x0esync_timesta\
    mp\x18\x05\x20\x01(\x04R\rsyncTimestamp\x12+\n\x11confirm_timestamp\x18\
    \x06\x20\x01(\x04R\x10confirmTimestamp\x12*\n\x05state\x18\x07\x20\x01(\
    \x0e2\x14.emerald.state.StateR\x05state\x12-\n\x05block\x18\x08\x20\x01(\
    \x0b2\x17.emerald.state.BlockRefR\x05block\x12-\n\x06status\x18\t\x20\
    \x01(\x0e2\x15.emerald.state.StatusR\x06status\x12/\n\x07changes\x18\n\
    \x20\x03(\x0b2\x15.emerald.state.ChangeR\x07changes\"[\n\x08BlockRef\x12\
    \x16\n\x06height\x18\x01\x20\x01(\x04R\x06height\x12\x19\n\x08block_id\
    \x18\x02\x20\x01(\tR\x07blockId\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\
    \x04R\ttimestamp\"\xa1\x02\n\x06Change\x12\x10\n\x03own\x18\x01\x20\x01(\
    \x08R\x03own\x12\x1b\n\twallet_id\x18\x02\x20\x01(\tR\x08walletId\x12\
    \x19\n\x08entry_id\x18\x03\x20\x01(\rR\x07entryId\x12\x18\n\x07address\
    \x18\x04\x20\x01(\tR\x07address\x12\x17\n\x07hd_path\x18\x05\x20\x01(\tR\
    \x06hdPath\x12\x14\n\x05asset\x18\x06\x20\x01(\tR\x05asset\x12\x16\n\x06\
    amount\x18\x07\x20\x01(\tR\x06amount\x126\n\x0bchange_type\x18\x08\x20\
    \x01(\x0b2\x15.emerald.state.ChangeR\nchangeType\"4\n\nChangeType\x12\
    \x0f\n\x0bUNSPECIFIED\x10\0\x12\x0c\n\x08TRANSFER\x10\x01\x12\x07\n\x03F\
    EE\x10\x02*\xe4\x01\n\x0cBlockchainId\x12\x15\n\x11CHAIN_UNSPECIFIED\x10\
    \0\x12\x11\n\rCHAIN_BITCOIN\x10\x01\x12\x12\n\x0eCHAIN_ETHEREUM\x10d\x12\
    \x1a\n\x16CHAIN_ETHEREUM_CLASSIC\x10e\x12\x11\n\x0cCHAIN_MORDEN\x10\x91N\
    \x12\x10\n\x0bCHAIN_KOVAN\x10\x92N\x12\x1a\n\x15CHAIN_TESTNET_BITCOIN\
    \x10\x93N\x12\x11\n\x0cCHAIN_GOERLI\x10\x95N\x12\x12\n\rCHAIN_ROPSTEN\
    \x10\x96N\x12\x12\n\rCHAIN_RINKEBY\x10\x97N*N\n\x05State\x12\x0c\n\x08PR\
    EPARED\x10\0\x12\r\n\tSUBMITTED\x10\n\x12\x0c\n\x08REPLACED\x10\x0b\x12\
    \r\n\tCONFIRMED\x10\x0c\x12\x0b\n\x07DROPPED\x10\x14*)\n\x06Status\x12\
    \x0b\n\x07UNKNOWN\x10\0\x12\x06\n\x02OK\x10\x01\x12\n\n\x06FAILED\x10\
    \x02J\xf2\x11\n\x06\x12\x04\0\0B\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\0\x16\n\t\n\x02\x03\0\x12\x03\x02\0\x16\n\n\n\
    \x02\x04\0\x12\x04\x04\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x13\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x02\x1e\n\x0c\n\x05\x04\0\x02\0\x06\
    \x12\x03\x05\x02\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x0f\x19\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x1c\x1d\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x06\x02\x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\t\x0e\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x06\x11\x12\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x02\x0f\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x02\x06\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x07\x07\n\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07\r\
    \x0e\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x08\x02\x1d\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x08\t\
    \x18\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x08\x1b\x1c\n\x0b\n\x04\x04\0\
    \x02\x04\x12\x03\t\x02\x1c\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\t\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\t\t\x17\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03\t\x1a\x1b\n\x0b\n\x04\x04\0\x02\x05\x12\x03\n\x02\x1f\n\
    \x0c\n\x05\x04\0\x02\x05\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\x05\
    \x01\x12\x03\n\t\x1a\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\n\x1d\x1e\n\
    \x0b\n\x04\x04\0\x02\x06\x12\x03\x0b\x02\x12\n\x0c\n\x05\x04\0\x02\x06\
    \x06\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0b\x08\r\
    \n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0b\x10\x11\n\x0b\n\x04\x04\0\x02\
    \x07\x12\x03\x0c\x02\x15\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03\x0c\x02\n\
    \n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0c\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x07\x03\x12\x03\x0c\x13\x14\n\x0b\n\x04\x04\0\x02\x08\x12\x03\r\x02\x14\
    \n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x08\x01\x12\x03\r\t\x0f\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\r\x12\x13\
    \n\x0b\n\x04\x04\0\x02\t\x12\x03\x0e\x02\x1f\n\x0c\n\x05\x04\0\x02\t\x04\
    \x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\x02\t\x06\x12\x03\x0e\x0b\x11\n\x0c\
    \n\x05\x04\0\x02\t\x01\x12\x03\x0e\x12\x19\n\x0c\n\x05\x04\0\x02\t\x03\
    \x12\x03\x0e\x1c\x1e\n\n\n\x02\x04\x01\x12\x04\x11\0\x15\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x11\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x12\
    \x02\x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x12\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x12\x12\x13\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x13\x02\x16\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x13\t\x11\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x13\x14\
    \x15\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x14\x02\x17\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x14\t\x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x14\x15\x16\n\n\n\x02\
    \x05\0\x12\x04\x17\0\"\x01\n\n\n\x03\x05\0\x01\x12\x03\x17\x05\x11\n\x0b\
    \n\x04\x05\0\x02\0\x12\x03\x18\x02\x18\n\x0c\n\x05\x05\0\x02\0\x01\x12\
    \x03\x18\x02\x13\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x18\x16\x17\n\x0b\n\
    \x04\x05\0\x02\x01\x12\x03\x19\x02\x14\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x03\x19\x02\x0f\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x19\x12\x13\n\x0b\
    \n\x04\x05\0\x02\x02\x12\x03\x1a\x02\x17\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x03\x1a\x02\x10\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x1a\x13\x16\n\
    \x0b\n\x04\x05\0\x02\x03\x12\x03\x1b\x02\x1f\n\x0c\n\x05\x05\0\x02\x03\
    \x01\x12\x03\x1b\x02\x18\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x1b\x1b\
    \x1e\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x1c\x02\x17\n\x0c\n\x05\x05\0\x02\
    \x04\x01\x12\x03\x1c\x02\x0e\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x1c\
    \x11\x16\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x1d\x02\x16\n\x0c\n\x05\x05\0\
    \x02\x05\x01\x12\x03\x1d\x02\r\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x1d\
    \x10\x15\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x1e\x02\x20\n\x0c\n\x05\x05\0\
    \x02\x06\x01\x12\x03\x1e\x02\x17\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\
    \x1e\x1a\x1f\n\x0b\n\x04\x05\0\x02\x07\x12\x03\x1f\x02\x17\n\x0c\n\x05\
    \x05\0\x02\x07\x01\x12\x03\x1f\x02\x0e\n\x0c\n\x05\x05\0\x02\x07\x02\x12\
    \x03\x1f\x11\x16\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x20\x02\x18\n\x0c\n\
    \x05\x05\0\x02\x08\x01\x12\x03\x20\x02\x0f\n\x0c\n\x05\x05\0\x02\x08\x02\
    \x12\x03\x20\x12\x17\n\x0b\n\x04\x05\0\x02\t\x12\x03!\x02\x18\n\x0c\n\
    \x05\x05\0\x02\t\x01\x12\x03!\x02\x0f\n\x0c\n\x05\x05\0\x02\t\x02\x12\
    \x03!\x12\x17\n\n\n\x02\x05\x01\x12\x04$\0*\x01\n\n\n\x03\x05\x01\x01\
    \x12\x03$\x05\n\n\x0b\n\x04\x05\x01\x02\0\x12\x03%\x02\x0f\n\x0c\n\x05\
    \x05\x01\x02\0\x01\x12\x03%\x02\n\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03%\
    \r\x0e\n\x0b\n\x04\x05\x01\x02\x01\x12\x03&\x02\x11\n\x0c\n\x05\x05\x01\
    \x02\x01\x01\x12\x03&\x02\x0b\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03&\
    \x0e\x10\n\x0b\n\x04\x05\x01\x02\x02\x12\x03'\x02\x10\n\x0c\n\x05\x05\
    \x01\x02\x02\x01\x12\x03'\x02\n\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03'\
    \r\x0f\n\x0b\n\x04\x05\x01\x02\x03\x12\x03(\x02\x11\n\x0c\n\x05\x05\x01\
    \x02\x03\x01\x12\x03(\x02\x0b\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03(\
    \x0e\x10\n\x0b\n\x04\x05\x01\x02\x04\x12\x03)\x02\x0f\n\x0c\n\x05\x05\
    \x01\x02\x04\x01\x12\x03)\x02\t\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03)\
    \x0c\x0e\n\n\n\x02\x05\x02\x12\x04,\00\x01\n\n\n\x03\x05\x02\x01\x12\x03\
    ,\x05\x0b\n\x0b\n\x04\x05\x02\x02\0\x12\x03-\x02\x0e\n\x0c\n\x05\x05\x02\
    \x02\0\x01\x12\x03-\x02\t\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03-\x0c\r\n\
    \x0b\n\x04\x05\x02\x02\x01\x12\x03.\x02\t\n\x0c\n\x05\x05\x02\x02\x01\
    \x01\x12\x03.\x02\x04\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03.\x07\x08\n\
    \x0b\n\x04\x05\x02\x02\x02\x12\x03/\x02\r\n\x0c\n\x05\x05\x02\x02\x02\
    \x01\x12\x03/\x02\x08\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03/\x0b\x0c\n\
    \n\n\x02\x04\x02\x12\x042\0B\x01\n\n\n\x03\x04\x02\x01\x12\x032\x08\x0e\
    \n\x0b\n\x04\x04\x02\x02\0\x12\x033\x02\x0f\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x033\x02\x06\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x033\x07\n\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x033\r\x0e\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x034\x02\x17\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x034\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x034\t\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x034\x15\x16\n\x0b\n\x04\x04\x02\x02\x02\x12\x035\x02\x16\n\x0c\n\
    \x05\x04\x02\x02\x02\x05\x12\x035\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x035\t\x11\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x035\x14\x15\n\
    \x0b\n\x04\x04\x02\x02\x03\x12\x036\x02\x15\n\x0c\n\x05\x04\x02\x02\x03\
    \x05\x12\x036\x02\x08\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x036\t\x10\n\
    \x0c\n\x05\x04\x02\x02\x03\x03\x12\x036\x13\x14\n\x0b\n\x04\x04\x02\x02\
    \x04\x12\x037\x02\x15\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x037\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x04\x01\x12\x037\t\x10\n\x0c\n\x05\x04\x02\x02\
    \x04\x03\x12\x037\x13\x14\n\x0b\n\x04\x04\x02\x02\x05\x12\x038\x02\x13\n\
    \x0c\n\x05\x04\x02\x02\x05\x05\x12\x038\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \x05\x01\x12\x038\t\x0e\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x038\x11\x12\
    \n*\n\x04\x04\x02\x02\x06\x12\x03:\x02\x14\x1a\x1d\x20negative\x20or\x20\
    positive\x20number\n\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03:\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x06\x01\x12\x03:\t\x0f\n\x0c\n\x05\x04\x02\x02\
    \x06\x03\x12\x03:\x12\x13\n\x0b\n\x04\x04\x02\x02\x07\x12\x03;\x02\x19\n\
    \x0c\n\x05\x04\x02\x02\x07\x06\x12\x03;\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \x07\x01\x12\x03;\t\x14\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03;\x17\x18\
    \n\x0c\n\x04\x04\x02\x04\0\x12\x04=\x02A\x03\n\x0c\n\x05\x04\x02\x04\0\
    \x01\x12\x03=\x07\x11\n\r\n\x06\x04\x02\x04\0\x02\0\x12\x03>\x04\x14\n\
    \x0e\n\x07\x04\x02\x04\0\x02\0\x01\x12\x03>\x04\x0f\n\x0e\n\x07\x04\x02\
    \x04\0\x02\0\x02\x12\x03>\x12\x13\n\r\n\x06\x04\x02\x04\0\x02\x01\x12\
    \x03?\x04\x11\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x01\x12\x03?\x04\x0c\n\
    \x0e\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x03?\x0f\x10\n\r\n\x06\x04\x02\
    \x04\0\x02\x02\x12\x03@\x04\x0c\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\
    \x12\x03@\x04\x07\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x02\x12\x03@\n\x0bb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
